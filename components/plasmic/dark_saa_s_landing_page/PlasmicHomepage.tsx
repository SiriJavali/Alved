/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 53Xi8PjeNu3UNxbnjUtmHg
// Component: CZwG1LnBCPdd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: FFSnDzZ1v6zV/component
import Button from "../../Button"; // plasmic-import: mDqPQunCKBZT/component
import Section from "../../Section"; // plasmic-import: qqHHF8fb0kqV/component
import PriceCard from "../../PriceCard"; // plasmic-import: 5BwOrpbCd1kC/component
import FooterSection from "../../FooterSection"; // plasmic-import: T0ZXuMdMdzz5/component

import { useScreenVariants as useScreenVariantsdGkOhQb3JToV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: dGKOhQb3JToV/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 53Xi8PjeNu3UNxbnjUtmHg/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: CZwG1LnBCPdd/css

import IconArrowRightSvgIcon from "./icons/PlasmicIcon__IconArrowRightSvg"; // plasmic-import: OuSnyuzWIY-t/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  headerHeroSection?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  startSection?: Flex__<typeof Section>;
  h3?: Flex__<"h3">;
  pricingSection?: Flex__<typeof Section>;
  footerSection?: Flex__<typeof FooterSection>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdGkOhQb3JToV()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"headerHeroSection"}
          data-plasmic-override={overrides.headerHeroSection}
          hasGap={true}
          className={classNames(projectcss.all, sty.headerHeroSection)}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__szdGc)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__c8E9Q)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__xxVLg)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__adPap
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Analytics for developers can be better"
                    : "Alved-----the only tool needed for video editing"}
                </h1>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dv45W
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
                  ) : (
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "                                                                                                          Your ultimate AI video editing tool! Create stunning videos effortlessly with customizable clips, audio, and effects. Perfect for beginners and pros alike!\n\n"
                        }
                      </React.Fragment>
                      {
                        <h1
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1___9VyRs
                          )}
                        >
                          {"Edit. Create. Innovate \u2013 All with Alved!"}
                        </h1>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  )}
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__z3Dhk)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__srGsI)}
                    color={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "blueSmall"
                        : "blue"
                    }
                    endIcon={
                      <IconArrowRightSvgIcon
                        className={classNames(projectcss.all, sty.svg__k3KeZ)}
                        role={"img"}
                      />
                    }
                    link={"#"}
                    showEndIcon={true}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg___65TUh)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dNfnf
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Try Demo For Free"
                        : "Get Started"}
                    </div>
                  </Button>
                </Stack__>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fkB5U)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__tcwUn
                      )}
                      color={"blueBorder"}
                      endIcon={
                        <svg
                          className={classNames(
                            projectcss.all,
                            sty.svg___3UTvw
                          )}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__oKcxI)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      {"Learn More"}
                    </Button>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__iNdBt
                      )}
                      color={"blueBorder"}
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__wLaL4)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__gzEpU)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      {"Learn More"}
                    </Button>
                  </div>
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__sHlkq)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__gAe8)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "0px"
                      : "661px"
                  }
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100%"
                      : "100%"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/dark_saa_s_landing_page/images/dallE20241231184535AStunningAndFuturistic3DIllustrationOfAVideoEditingInterfaceForAnAiPoweredToolFeaturingGlowingHolographicElementsSleekTimelinesWebp.webp",
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </Stack__>
          </div>
        </Stack__>
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__pn4Bf)}
          displayHeight={"1111px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"774px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/dark_saa_s_landing_page/images/ellipseLeftPng.png",
            fullWidth: 469,
            fullHeight: 742,
            aspectRatio: undefined
          }}
        />

        <PlasmicImg__
          alt={""}
          className={classNames(sty.img___7Xkw9)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: "/plasmic/dark_saa_s_landing_page/images/ellipseRightPng.png",
            fullWidth: 437,
            fullHeight: 742,
            aspectRatio: undefined
          }}
        />

        <Section
          data-plasmic-name={"startSection"}
          data-plasmic-override={overrides.startSection}
          className={classNames("__wab_instance", sty.startSection)}
          size={"fullContentWidth"}
        >
          <div className={classNames(projectcss.all, sty.freeBox__nbJv4)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__as4Kt)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/dark_saa_s_landing_page/images/pricingImgSvg.svg",
                fullWidth: 300,
                fullHeight: 67,
                aspectRatio: 4.468401
              }}
            />

            <div className={classNames(projectcss.all, sty.columns__yQxsp)}>
              <div className={classNames(projectcss.all, sty.column___01I6U)}>
                <h3
                  data-plasmic-name={"h3"}
                  data-plasmic-override={overrides.h3}
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Start using our product today"
                    : "Start your AI video editing journey today"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hhPvR
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Faster than free analytics tools. Access to all your data, with respect to the privacy of your users."
                    : ""}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__fNkC2)}>
                <Button
                  className={classNames("__wab_instance", sty.button__kjYk)}
                  color={"white"}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__i5Vwu)}
                      role={"img"}
                    />
                  }
                  link={"#"}
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__aeyoQ)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pcqGc
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Get Started"
                      : "Get Started"}
                  </div>
                </Button>
              </div>
            </div>
          </div>
        </Section>
        <Section
          data-plasmic-name={"pricingSection"}
          data-plasmic-override={overrides.pricingSection}
          className={classNames("__wab_instance", sty.pricingSection)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__mIu4)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__ctlgx)}
            >
              <div className={classNames(projectcss.all, sty.column__yWenE)}>
                <PriceCard
                  borders={["flatLeft"]}
                  className={classNames("__wab_instance", sty.priceCard__s41ZZ)}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__jpXbe)}>
                <PriceCard
                  borders={["flatCenter"]}
                  className={classNames("__wab_instance", sty.priceCard__iU7Rs)}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox___6AYxG)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yxw76
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "We Recommended"
                      : "We Recommended"}
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__nPrOh)}>
                <PriceCard
                  borders={["flatRight"]}
                  className={classNames("__wab_instance", sty.priceCard__p3Tg)}
                />
              </div>
            </Stack__>
          </div>
        </Section>
        <FooterSection
          data-plasmic-name={"footerSection"}
          data-plasmic-override={overrides.footerSection}
          className={classNames("__wab_instance", sty.footerSection)}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroSection",
    "navbar",
    "startSection",
    "h3",
    "pricingSection",
    "footerSection"
  ],
  headerHeroSection: ["headerHeroSection", "navbar"],
  navbar: ["navbar"],
  startSection: ["startSection", "h3"],
  h3: ["h3"],
  pricingSection: ["pricingSection"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerHeroSection: "div";
  navbar: typeof Navbar;
  startSection: typeof Section;
  h3: "h3";
  pricingSection: typeof Section;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    navbar: makeNodeComponent("navbar"),
    startSection: makeNodeComponent("startSection"),
    h3: makeNodeComponent("h3"),
    pricingSection: makeNodeComponent("pricingSection"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
